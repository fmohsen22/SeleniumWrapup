package com.wraper.app.gui.pages.easyseleium;import com.wraper.app.gui.elements.clickable.GuiButtonElement;import com.wraper.app.gui.elements.datainput.GuiInputElement;import com.wraper.app.gui.elements.dataoutput.GuiSimpleOutput;import com.wraper.app.gui.pages.base.E2EBasePage;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.support.pagefactory.ByChained;public class SimpleFormDemoPage extends E2EBasePage {    public By           byContainer = By.className("panel-body");    //Block Single Input Field    public GuiInputElement  inpSinglMsg;    public GuiButtonElement btnSinglMsg;    public GuiSimpleOutput  outSinglMsg;    //Block Two Input Fields    public GuiInputElement  inpMsgA;    public GuiInputElement  inpMsgB;    public GuiButtonElement btnTotlMsg;    public GuiSimpleOutput  outTotalMsg;    public SimpleFormDemoPage(WebDriver driverProvider) {        super(driverProvider);        inpSinglMsg = GuiInputElement.of(driverProvider, new ByChained(byContainer,By.id("get-input"),By.className("form-group")));        btnSinglMsg = GuiButtonElement.of(driverProvider, new ByChained(byContainer,By.cssSelector("#get-input > button")));        outSinglMsg = GuiSimpleOutput.of(driverProvider, By.id("user-message"));        inpMsgA = GuiInputElement.of(driverProvider, new ByChained(byContainer,By.cssSelector("#gettotal > div:nth-child(1)")));        inpMsgB = GuiInputElement.of(driverProvider, new ByChained(byContainer,By.cssSelector("#gettotal > div:nth-child(2)")));        btnTotlMsg = GuiButtonElement.of(driverProvider, new ByChained(byContainer,By.cssSelector("#gettotal > button")));        outTotalMsg = GuiSimpleOutput.of(driverProvider, By.cssSelector("#easycont > div > div.col-md-6.text-left > div:nth-child(5) > div.panel-body > div"));    }    public static SimpleFormDemoPage of(WebDriver driverProvider){return new SimpleFormDemoPage(driverProvider); }    @Override    public <T extends E2EBasePage> T waitUntilReady() {        return null;    }    @Override    public void assertPageIsShown() {    }    @Override    public void waitUntilVisible() {    }    @Override    public boolean isVisible() {        return false;    }}